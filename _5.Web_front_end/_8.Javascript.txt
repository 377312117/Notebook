JavaScript概述
介绍
    简称js,是浏览器解释型语言,直接交给浏览器,由浏览器的解释引擎运行(脚本语言)
作用
    实现页面动态效果和用户交互
组成
    核心语法
        ECMAScript
    内置对象(Number,DOM)
        基础对象类型
        DOM(重点:Document Object Model)
        BOM(Browser Object Model)
    自定义对象
使用JS
    在html文档中引入js代码有三种方式
    1.通过元素绑定事件的方式引入了JS代码
        事件:
            用户行为触发的操作
        语法
            <元素 事件函数名='JS代码语句'>
            事件函数
                鼠标单击事件 onclick
        JS代码:
            弹框显示信息:alert('文本');
            控制台输出信息 console.log('提示文本');
            示例
                onclick="alert('点击了H1');console.log('控制台显示')"
    2.通过<script></script>标签书写JS代码,标签内容就是JS代码
        可以书写在任意位置,书写任意多次
        注意
            浏览器遵循从上到下执行代码,书写位置可能会影响效果
        JS代码语句
            1.prompt('');带有输入框的弹框,可用来接收用户输入
            2.document.write('')在网页中写入内容
            使用
                1,普通的网页书写方式,按照从上到下的执行顺序,一次在网页的相应位置插入内容
                ,可以识别标签
                2.如果以元素绑定事件的方式,在页面中写入内容,相当于重写页面
    3.外部的js文件
        创建外部的.js文件
        在html文档中使用<script src='url'></script>引入
        如果<script></script>做外部文件的引入操作,标签内部就不能再写JS代码
        html中head: <script src='index.js'></script>
基础语法
    JS由语句组成,每条语句以分号作为结束标志
    JS严格区分大小写
    JS注释
        //  单行注释
        /*  */ 多行注释
js的常量和变量
    变量
            在程序运行过程中可以随时修改的数据
        语法
            //使用关键字var声明变量
            var 变量名
            // 为变量赋值
            变量=值
        使用注意
            1.var关键字可以省略,但是不要省略
            关系到变量的作用域
            2.变量如果只使用var关键字,不赋值,默认为undefined
            3.如果变量未使用var关键字声明也不赋值,会报错
        变量的命名规范
            1.数字,字母,下划线,$,组成,不能以数字开头
            2.变量名尽量见名知意,禁止和js的保留字和关键字冲突
                例如
                    var function while for in each
                    switch case break default continue class
                    name new  Number  String Array
                    do if else...
            3.变量名由多个单词组成,采用小驼峰标识
    常量
        常量一经修改就不能更改,强制修改会报错
        语法
            const 常量名=值;
            常量在定义时,必须声明并赋值
        使用
            常量名采用全大写字母,与变量名区分
    小数位的操作
        小数在计算机中存储和计算都存在误差,不准确,可以设置小数的显示位数
        方位
            toFixed(n)
            n表示保留的小数位数
            示例
                var n = 62.8000004
                n = n.toFixed(2);
                console.log(n)在控制台显示

JS数据类型
    简单数据类型(基础)
        Number 数字类型
            整数和小数统称为Number类型
            分类
                整数
                    十进制表示方法
                        var n = 100;
                    八进制表示整数
                        八进制以0为前缀,逢8进1
                        示例
                            var num = 015;
                    十六进制
                        以0x为前缀
                            var num2 = 0x35;
                    如果使用consloe.log()输出整数值,不管什么进制都转换成十进制输出
                小数
                    直接以小数点表示小数
                        var f1 = 10.5;
                    科学计数法
                        var f2 = 1.5e3;
                        e:以10为底
                        3:表示10的次方数
        String字符串类型
            所有使用''或者""引起来的内容,都是字符串
            字符串中所有的字符都是以Unicode码存储的
                字母和数字的Unicode码值和ASC码值是一样的
                中文字符的Unicode编码,在计算机中以16进制存储
            查看制定字符的Unicode码值
                charCodeAt(index)
                    index表示指定字符的下标,字符串中默认从0开始为每一位字符分配下标
                    et:
                        var str = '张三丰';
                        str.charCodeAt(0);
            中文字符在计算机中以16进制存储,查看中文的十六进制
                使用
                    toString(16);//将unicode码转换为16进制表示
                示例
                    已知中文的十六进制字符串,想转换为中文显示
                    添加\u转义即可
                        '\u5f20'
                中文的范围
                    '\u4e00' ~ '\u9fa5'
                转义字符
                    \u 转义为中文显示
                    \n 换行
                    \t 制表符
                    \' 表示'
                    \\ 反斜杠
        Boolean布尔类型
            只有真假两个值  true/false
            true = 1 
            false = 0
        underfined
            当变量声明未定义时,默认为underfined
            访问对象不存在的属性时,默认为underfined
        null
            空类型
        6.检测数据类型
            使用 typeof
            示例
                typeof num;
                typeof(num + str)
    引用数据类型
        对象 Number String

数据类型转换
    1.自动类型转换
        不同类型的数据在做运算时,会自动转换
        分类
            1.字符串与其他数据类型做加法运算
                一旦与字符串结合使用,将都会转换为字符串显示
            2.Number+Boolean
                将bool数转换为0/1,然后和数字相加
            3.number+underfined/null
                number+underfined   ==> NaN  Not a Number(不是一个数字)
                number+null  ==> number(null为0值)
            4.boolean+underfined/null
                ture+underfined   ==> NaN
                ture+null     ==> 1
    2.强制类型转换
        将其他数据类型转换为字符串类型
            1.将其他数据类型转换为转为字符串类型
                方法 toString();
                返回字符串结果
            2.将字符串或布尔值转化为number类型
                方法Number(变量)
                返回转换后的结果
                    1.数字字符串'100'可以直接转为number 100
                    2.非数字字符串'100a'等,转换失败,返回NaN
                    3.布尔类型转number
                        true = 1
                        false = 0
            3.解析字符串中的数字
                方法
                    parseInt(变量):解析字符串中的整数部分
                    parseFloat(变量): 解析字符串中的number部分
                注意
                    解析时,从第一个字符开始向后解析,对每一位进行转number操作
                    碰到非数字,停止解析,返回结果
                示例
                    parseInt('100a')   // 100
                    parseInt('a100')   // NaN,第一位就碰到非数字,停止解析
                    parseFloat('18.5a')   //18.5
                    parseInt('18.5a')   //18
                    parseInt('true')    // 先转换为'true'  ==> NaN 
                参数使用
                    如果传递的数据时非字符串类型,方法中,会先将参数转换为string
                    再对每一个字符转number解析
运算符
    1.赋值运算符
        =:将右边表达式的值,赋给左边的变量
    2.算数运算符
        + - * / % (取余数)
        1.字符串使用+,表示字符串拼接
        2.在其他运算符中,会将非数字转换为number类型
          NaN与任意类型结合运算,结果都为NaN
          null为空值,与其他类型结合运算,不影响后果
    3.自增和自减运算
        ++ : 自增 表示在自身基础上+1
        -- : 自减 表示在自身基础上-1
        示例
            var n = 10;
            n++;  //n += 1; n=n+1
            ++n;  //等价n++
        注意   
            自增和自减运算符在单独与变量结合使用的时候,做前缀和后缀都可以
            如果与其他运算符结合使用,前缀和后缀有区别
                做前缀,先++/--
                做后缀,后++/--
                et  
                    var num = 5;
                    var r1 = num ++; //r1=5,num=6
                    var r2 = ++ num // r2=7 ,num=7
                    思考题
                        var n = 5;
                        var res = n++ + ++n + n++ + ++n + n;
                        表达式1:var r1 = n++;//r1=5,n=6
                               var r2 = ++n; //7,7
                               var r3 = n++ ; // 7,8
                               var r4 = ++n; //9,9
                               var r5 = n   //9



                
