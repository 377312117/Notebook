Module
1.模块
    定义:
        模块是一个包含一系列数据/函数/类等组成的程序组
        模块是一个文件,文件名通常以py结尾
    作用:
        让一些相关的数据,函数,类等有逻辑的组织在一起,使逻辑语言更为清晰
        模块中的数据,函数和类等可提供给其他模块和程序使用
    模块的分类:
        1.内置模块:
            在解析器内部可以直接使用(通常用C语言编写)
        2.标准模块库:
            在安装python时已经安装,且可以直接使用,通常使用Python语言编写
        3.第三方模块库
            通常为开源,需要自己安装
            $pip3 install xxxx
        4.用户自己编写的模块
            也可以作为其他人的第三方模块
2.模块的导入
import 语句
    语法:
        import 模块名1 [as 模块新名1],模块名2 [as 模块新名2],.....
    作用:
        将某模块整体导入到当前模块中
    用法:
        模块名.属性名
    如:
        import math(as 别名)
        print(math.factorial(5))
        print("圆周率为:",math.pi)
    dir(obj)函数 返回模块内所有属性的字符串列表
    help(模块名) 可以查看模块相关的文档字符串
from import 语句
    语法:
        from 模块名 import 模块属性名1 [as 属性新名1],
        模块属性名2 [as 属性新名2]
    作用;
        将某个模块的一个或多个属性导入当前模块的作用域
    示例:
        from math import sin
        from math import pi,e,cos
        from math import factorial ad fact
        print(sin(pi/2)*fac(5))
from import * 语句
    语法:
        from 模块名 import * 语句
        #尽可能避免这种情况的使用
    作用:
        将某模块所有的属性导入到当前模块
    示例:
        from math import *
        print(sin(pi/2)*fac(5))
        print(factorial(5))
dir 函数
        dir([对象])  返回一个字符串列表
    作用:
        1,如果没有参数,则返回当前作用域内所偶遇变量的列表
        2,如果给定一个对象作为参数,则返回这个对象的所有变量的列表
            1)对于一个模块,返回这个模块的所有变量
            2)对于一个类,返回类的所有类的变量,并递归基类对象的所有变量
            3)对于其他对象返回所有变量,类变量和基类变量
3.数学模块
        模块名 math 
    用法:
        1.from math import *
        2.import math
        3.from math import pi,e,cos
    文档参见:
        python_base_docs_html/数学模块.html
4.时间模块
        模块名:time
    文档参见:
        时间模块.html
5.系统模块
        模块名 sys
        文档参见:  系统模块.html
6.自定义模块
  要求:
    模块文件名后缀必须为.py结尾
    模块文件名必须是合法的标识符
    避免名称和内建模块名冲突
  导入方式:
    import 自定义模块名
    from 自定义模块名 import 属性
    from 自定义模块名 import *
  示例见:
    mymod.py
    test_mymod.py

import 语句 搜索模块的路径顺序
   1. 搜索内建模块
   2. 搜索程序运行时的路径(当前工作目录)
   3. 搜索sys.path提供的路径
      可以在sys.path里添加自定义的路径
      如:
        import sys
        sys.path.append("/home/tarena")
        imoprt mymod
        # 可以导入/home/tarena/mymod.py这个模块

模块化编程的优点:
  1. 有利于多人合作开发
  2. 使代码更加易于维护
  3. 提高代码的复用率
  4. 模块化编程有利于解决函数名和变量名冲突(模块内的变量的作用域为模块内为全局)

模块的加载过程:
  在模块导入时,模块的所有语句会执行
  如果一个模块已经导入,则再次导入时不会重新执行模块内的语句

模块的重新加载 
  import mymod
  import imp
  imp.reload(mymod)  # 重新加载mymod模块

模块被导入和执行的过程:
  1. 搜索相关的路径找模块文件.py
  2. 判断是否有此模块对应的.pyc文件.如果pyc文件比.py文件新
     则直接加载.pyc文件,否则用.py文件重新生成.pyc文件并加载

pyc 模块的编译
            编译             执行
   mymod.py ----> mymod.pyc ----> pytyon3

模块的预置属性
  __doc__属性绑定模块的文档字符串
    模块的文档字符串是模块内第一个没有赋值给任何变量的字符串

  __file__属性
    __file__ 用来绑定模块所对应的文件路径名
  
  __name__属性
    作用:
      1. 记录模块名
      2. 用来判断是否为主模块
    说明:
      1.当此模块为主模块运行时,__name__绑定'__main__'
      2. 当此模块不是主模块运行,而是被其它模块导入时,此模块名为模块文件.py前面的模块名
         如: mymod.py 的模块名为 mymod
      注:
        主模块是指最先被python解释执行器执行的模块
        
模块的 __all__ 列表
  __all__列表是一个用来存储可导入属性的字符串列表

  作用:
    限制用from xxx imoprt * 语句导入时导入部分属性,而不是全部属性

  示例见:
    mymod2.py


模块的隐藏属性:
  模块中以'_' 开头的属性,在from xxx import * 导入时将不被导入,通常称这些属性为隐藏属性

  示例见:
    mymod3.py

随机模块 random
  作用:
    用于模拟或生成随机输出的模块
  文档参见:
    python_base_docs_html/随机模块random.html
