文件
1.文件
    定义
        用于数据存储的单位
        文件通常用于长期存储数据
        文件中的数据是以字节为单位进行顺序存储的
    文件的操作流程
        1.打开文件
        2.读/写文件 
        3.关闭文件
    文件的打开函数
        open(file,mode="rt") 用于打开一个文件,返回此文件流对象,如果打开失败,则会触发OSError错误
            file 是文件路径名的字符串
            mode 是打开的模式
                详情见: file.html
    文件的关闭方法
        F.close() # 关闭已经打开的文件,释放系统资源
2.文本文件的基本操作
    读文件:
        F.readline()   # 读取一行文字
        F.readlines()  # 读取多行文字
        F.read(n)      # 读取n个字符
      示例见:1,2
    写文件:
        F.write(字符串)  # 写字符串到一个已经打开的文件,里面可能是字符串/字节串
        F.writelines(字符串列表)   # 写多个字符串到已经打开的文件中
      示例见:3
      打开模式:
        "w" : 以只写模式打开,如果源文件已存在,删除原来的内容删掉,源文件不存在则创建
        "x" : 创建一个新文件,并以写模式打开这个文件,已有源文件则会报错
        "a" : 以只写文件打开一个文件,如果源文件存在内容,则从末尾换行追加内容
3.文本文件读写时各操作系统的换行符问题
        Linux换行符 :"\n"
        windows换行符 :"\r\n"
        旧的Macintosh:"\r"
        新的Mac OS X:"\n"
4.文本文件操作说明
    文本模式下,各操作系统的换行符在读入python内部时会自动转换为"\n"
5.文件的迭代读取
    文件流对象是可迭代对象,迭代过程将以换行符"\n"作用分隔符依次获取
    如:
        f = open("infos.txt")
        for line in f:
            print(line)
6.二进制文件的操作
    操作模式字符: "b"
    默认文件中存储的都是以字节(bytes为单位的数据,通常有人为规定的格式)
    对二进制文件的读写需要用到字节串(bytes)进行操作
    读写时会直接把磁盘数据以字节串形式返回或写入
  F.read()返回的类型:
    对于文本模式,F.read()返回类型为字符串str
    对于二进制文件,F.read()返回的字节串bytes
7.F.tell()
        返回当前文件流的绝对位置,几乎只对二进制文件操作
      示例:8
8.F.seek(偏移量,whence=相对位置))
        基本只对二进制文件操作
    偏移量:
        大于0的数代表向后偏移(文件尾位置)
        小于0的数代表向文件头偏移
    相对位置:
        0 代表文件头位置开始偏移
        1 代表从当前位置开始偏移
        2 代表从文件尾开始偏移
    示例:9
9.F.flush 
    强制清空缓冲区,将缓冲区信息写到磁盘上
    关闭文件也会清空缓冲区
10.标准输入输出文件
    sys.stdin  标准输入文件(默认为键盘)
    sys.stdout 标准输出文件(默认为屏幕终端)
    sys.stderr 标准错误输入文件(默认为屏幕终端)
    标准文件不需要打开和关闭,可以直接使用
    模块名:
        sys
    示例:
        10
11.汉字编码的问题
    国标系列:
        GB18030(二字节或四字节编码,共27533汉字)
        GBK(二字节编码,共21003汉字)
        GB2312(二字节编码,共6763个汉字)
        注:windows常用
    国际系列:
        Unicode <----->  UTF - 8 可互相转换
        Unicode16
        Unicode32
        (Linux/Mac OS X / Android常用)
12.python的编码字符串
        "gb18030"包含"gbk"
        "gbk"包含"gb2312"
        "gb2312"
        "utf-8"  
        "ascii"
            str默认统一用Unicode
            s_utf8 = s.encode()
            windows常用gb系列
            其他默认以unicode编码
    编码注释:
        在源文件的第一行或第二行写入如下内容为编码注释:
        # -*- coding:gbk -*-
        或
        # -*- coding:utf-8 -*-
        作用:
            告诉python解释执行器,当前的编码类型
