 1.if语句
	作用：
	    让程序根据条件选择性执行某条语句或者某些语句
	说明：
	     又称为条件语句也称为分支语句
	语法：
	      if 真值表达式:
	           语句块1
	      elif 真值表达式2:
		   语句块2
	      elif 真值表达式3:
		   语句块3
		     ...
	      else:
		   语句块4
		语法说明:
		   elif子句可以有0个，1个或多个
		   else子句可以有0个1个且只能放在此if语句的最后
		       ps：python允许写30<x<50这样的真值表达式
		要求：
		   if语句内部的语句通常要以4个空格的缩进来表示包含关系，
		   相同的缩进格式代表相同所属级别
      1.1.if语句的真值表达式
	         if 100：
		     print("真值")
		 #等同于
		 if bool(100):
		     print("真值")
      1.2.嵌套选择语句
	         if 表达式1
		     if  嵌套表达式1
		     elif   ...
		     ....
		 else ....
            嵌套语句必须在大条件成立的情况下才转入嵌套语句，所以嵌套语句不再重复上层判断条件
      1.3.条件表达式
	        语法：表达式1 if 真值表达式 else 表达式2
		作用：如果真值表达式的布尔环境为True，则执行表达式1
		      并返回结果的引用，否则执行表达式2并返回结果的引用
                示例：money=int(input("请输入商品总额："))
		      pay=money-20 if money>100 else money
		      print("您需要支付",pay,元)
		      解释：满足if后的条件执行表达式1，不满足执行else后的表达式2
2.while语句
      2.1作用：
          根据一定条件，重复执行一条语句或多条语句
      2.2 while 真值表达式:
               语句块1...
          else:
               语句块2...
      2.3.说明：
         1).先执行真值表达式，测试布尔值为True或者False
         2).如果真值表达式得测试值为True，则执行语句1，然后返回到第1步重新进行测试
         3).如果真值表达式的测试值为False,则执行else子句中的语句块2，然后结束此while
           语句的执行。如果没有else子句，则直接结束while语句的执行。
         4).else子句部分可以省略(同if语句类似)
     2.4注意事项:
         1).要控制循环的真值表达式的值来防止死循环
         2).通常用于真值表达式中的循环变量来控制循环条件
         3).通常在循环语句块内需要改变循环变量来控制循环的次数和变量的走向
        ps:print()   #如果括号内什么都没有的话，默认添加换行符，等同于print(end="/n")
     2.5while 嵌套
         while语句本身是语句，和其他语句一样 可以嵌套在其他复合语句中(如if,while,for语句等)
           while语句嵌套示意:
              while真值表达式:
	          ....
                  while 真值表达式2：
	              .....
	          else:
	             .....
             else:
	         ....
     2.6 break语句 
        作用：
            用于while和for语句中。终止当前循环语句的执行。
        说明：
	     1).break 语句执行时，此循环语句break之后的语句将不再执行
             2).break语句通常和if语句组合使用
	     3).break终止循环时，循环语句中的else子句将不会被执行
	     4).break语句只能终止当前循环的执行，如果有嵌套时，不会跳出嵌套的外重循环
	     5).break语句只能在（如while和for语句）循环内部使用
        例子1:
          i=1
	  while 1<10:#判断条件，如果不满足则跳至执行else后的语句。
	      print("循环开始时i=",i)
	      if i==5:
	          break  #跳出当前while语句,下语句也将直接跳出不执行,非正常结束
		         #只能跳出所处在的循环，不能跳出除此以外或者其他的循环
	      print("循环结束时i=",i)
	      i+=1
	  else:
	      #当Break生效的时候时，整个while语句不执行，包括else部分，直接跳出该循环。
	      print("我是while语句的else子句的print",i)
	  print("程序即将退出")
        例子2：
	     for语句中用break语句终端执行时，else子句不会被执行
	     for x in range(10)
		print(x)
		if x==3:
			break
		else:
		    print("此句不执行")
     
     2.7死循环 death loop:
         说明：
             1).死循环是指循环条件一直成立的循环
             2).死循环通常用break来终止循环
             3).死循环else子句永远不会执行
	     用于循环次数不确定的循环，来终止循环。
3.for 语句
    3.1 for语句简介
      作用：
       用来遍历可迭代对象的数据元素
         #遍历:每一次每一个数据经历一遍
         #可迭代对象:指能依次获取数据元素的对象
      可迭代对象：
          字符串   str
	  列表     list
	  元组     tuple
	  字典     dic
	  集合     set
      语法：
      for 变量列表 in 可迭代对象:
           语句块1 ....
      else:
           语句块2 ....
      语法说明：
        1）.可迭代对象每次提供一个元素依次赋值给变+量列表中的变量。
          赋值完毕后执行语句块1.重复此步骤
        2).当可迭代对象不能够提供数据时，执行else语句部分的语句块2，然后退出循环
        3).else子句部分可以省略(同while语句类似)
        4).当在语句内部使用break终止循环时，else子句部分语句块2不会执行。
      示例1：
      s="ABCDE"
         for x in s:
             print("---->",x)
	     if x=="c":  #此时的else子句不会执行
	         break
         else:
             print("for循环因迭代结束而终止")
      示例2：for语句嵌套
         for x in "ABC":
            for x in "123":
		print(x+y)
    3.2.range函数：
       作用:
            用来生成一个生成一系列整数的可迭代对象（也叫整数序列生成器），可设置步长
       调用格式：
            range(stop)
	         从零开始，每次生成一个整数后加1操作，直到stop为止（不包含stop）
	       range(start,stop,[step])从start开始，每次生成一个整数移动step，直到stop为止
	      （不包含stop，且step可以为负整数）
       示例1：
            range(4)  #生成 0 1 2 3不包含终止值
	    range(3,6) #生成 3 4 5 
	    range(1,10,2)  生成1 3 5 7 9 其中的2为步长，每次移动的长度，负数的话则是相反计数
	    range(4,1)     #步长默认为1，所以反序无法计数，返回空值
       示例2：
            i=6:
	    for x in range(1,i) #range函数只调用一次
	         #此print函数只执行5次
		 print(x,i)
		 i-=1
       示例3：
            for x in range(4,0)  #此表达式不成立！所以此句不执行，x不会被创建
	        print(x)
	    else:
	        #可能会报错
	        print("循环结束后的x值为："x)

    3.3 continue语句
          作用：
	       用于循环语句(while,for语句)中，不再执行本次循环内continue之后的语句，
	       重新开始一次新的循环
	  说明：
	       1.在while语句中执行continue语句，将直接跳转到while语句真值表达式处
	         重新判断循环条件。
	       2.在for语句中执行continue语句，将会从可迭代对象中取下一个元素，
	         绑定变量后再次循环
          示例1：
	       for i in range(5):
		   if i==2:   #如果i==2,重新开始一次循环，跳过本次循环
		       continue
		   print(i)   
          示例2：
	       i=0
	       while i<10:
		  if i % 2 ==1：
		      #因为在while里，在此跳过后会直接跳至真值表达式处，不会执行后续语句，导致死循环，
		      可根据此特性调整循环语句结构，将i+=1换至continue上方
		      continue   
		  print(i)
		  i+=1