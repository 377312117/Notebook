字符串：String  
              计算机中使用的字母，数字，字和符号包括：0-9，a-z,~!@ 包括空格等等。
	      而字符串是其一系列有序的字符，用来记录文本文字信息。
	      用法：用引号引起，包括'',"",''' ''',""" """等引号等
		a.空字符串的字面值表示方法：
			                   '',"",'''''',"""""",
			ps:空字符串的布尔值为False
		b.非空字符串的字面值表示方法:
			                    "hello"	
	     实质上字符串内存放的是有先后顺序的文字编码的字面值 			    
1.引号和特殊字符
	 a.'':单括号，里面添加内容
	   "":双引号，和单括号类似
	   ''' '''：所见即所得字符串
	            引号内的字符串换行会自动转换为换行符'/n'；三引号可以包含单引号和双引号;
	       ps：为避免引用内容中和该符号相冲突，引号交叉使用。总是成对出现，从左到右，从上往下按顺序识别。
	       都可以引用其他字符，也可以嵌套使用，相互交叉即可（三单引号和单引号除外,三双和双引号也同理，会引起冲突）,
	       单引号中的双引号不算结束符,双引号中的单引号也不算结束符。
	 c.转义字符:用转义字符代表特殊字符：
	         字符串面值中，用字符反斜杠(\)，后面跟一些字符代表一个字符。
              字符串中的转义字符表：
		  \'   代表一个单引号
		  \"   一个双引号
		  \\   代表一个反斜杠
		  \n   换行
		  \r   返回光标至行首
                        会从左开始覆盖原先的打印内容
	                     eg:print('abc\rAB')->ABc
		  \f   换页                 
		  \t   水平制表符
		     eg:print("AB\t\tCD")->AB      
	                一个按下tab键对应距离的宽度的空格
		  \v   垂直制表符
		  \b   倒退，从尾部删除
		      eg:print("ABCD\b\b")->AB
	                  默认从尾部删除\b的个数的字符
		  \0   空字符，字符为0
		  \0oo   oo为两位八进制表示的字符
		  \xXX   XX为两位十六进制表示的字符
		  \uXXXX unicode16的十六进制表示的字符
                  \uXXXXXXXX unicode32的十六进制表示的字符  
	   ascⅡ:(最多128个)   英文
	      main ascii
	   Unicode16(最多65536个)/ Unicode32(2**32次方)  中文
		  ps:常用asc||码：
		     字符     十进制    十六进制
		      "0"       48        0x30
		      "A"       65        0x41
		      "a"       97        0x61
         d.row字符串：让转义字符无效
	      格式：r'字符串内容'(其他的引号也可以)
              a='C:\Newfile\test.py'
	      系统会误判转义字符，故加上row即可
              a=r'C:\Newfile\test.py'即显示正常
2. 特殊符号以及运算符
         a.python语句首句必须顶格写，不能有空格，python建议变量的左右添加空格便于阅读
	 b.sep：
	       字符串与字符串之间的分隔符，默认值为一个空格，如果其中什么都没有，则字符相连 
	   #sep可以被任意修改,默认为一个空格，如果是空字符串，则取消掉其默认间隔。
	     eg:print("1234","abcd","abcdefg",sep='@')
                输出结果： 1234@abcd@abcdefg
		  ps:sep后面的分割符可以使用乘法。例如'@'*7
         c.end:
	       输出完毕后再流末尾自动追加一个字符，默认为换行符'\n'
	     eg1：print(1,2,3,4,end="\n\n\n\n");
	         # \n就是一行的换行符有几个换行符就换几行；
             eg2；print(6789,end='')
	         #如果是空字符串，则不会被默认换行，默认都会换一行
	     eg3:print() 打印一个换行
	 d.“+”法：
	        拼接字符串，只有字符串和字符串才能相加，不能字符串和数字相拼接。
	   '+=':
	        用于原字符串与右侧字符串拼接后替换原变量
	   “*”法：
	        将字符串输出N次，其中N是*后面的值，字符串与字符串之间不能相乘。
	        例：print(("+"+"-"*7)*2+"+")
		输出：+-------+-------+
                       ps:使用多重乘法可用括号括起。
         e.字符串的索引操作
	    字符串str是不可以改变的字符序列
	    索引 index
	    语法：字符串[整数表达式]
	    说明：python序列都可以用索引来访问序列中的对象(元素)
	          正向索引从0开始，最后一个是len(s)-1
		  反向索引从-1开始，第一个是-len(s)
              s= 'A  B  C  D  E  F '   （中间无空格，方便阅读）
	          1  2  3  4  5  6      正常顺序，无实际作用，计算机中顺序一般以0开始。
	          0  1  2  3  4  5      [索引]对应下标
                  -6-5 -4 -3 -2 -1      [索引]下标(倒序)
                   ps:字母更多，对应的下标也会发生改变，如果是ABCDEFG,则E对应的下标为5和-3.  
	         格式："ABCDEFG"[下标]
	           例：s="ABCDEF"[-6]="ABCDEF"[0]="A"
	              最后一个数是：s[len(s)-1]='F'
	              第一个数倒序索引表示可以是：s[-len(s)]='A'
         f. 切片
	     作用：
	          从字符串列中取出一部分相应的元素重新组成一个字符串；
	     语法：
	          字符串[(开始索引b):(结束索引e)(:(步长s))]
	     说明：
	           1.开始索引是切片开始切下的位置0代表第一个元素，-1代表最后一个元素
	           2.结束索引是切片的终止索引（但是不包含终止索引）
		   3.步长是切片每次索取玩当前索引后移动的方向和偏移量
		       1)没有步长，相当去取值完成后向后移动一个索引的位置（默认为1）
                       2)当步长为正整数时，取正向切片：
			 步长默认为1，开始索引默认为0
			 结束索引默认为len(s)
		  示例：s='ABCDE'
		        a=s[1:4]   #a='BCD'
                        a=s[1:]    #a='BCDE'
		        a=s[:2]    #a='AB'
                        a=s[:]     #a='ABCDE'
		        a=s[4:2]   #a=''
		        a=s[2:10000] #a='CDE' 开始索引/结束索引可以越界
		        a=s[1:4:2]   #a='BD'  步长是在切片中的移动方向和偏移量（每次跳几个字符）
                        a=s[::-1]   #a='EDCBA'
                        a=s[1::2]   #a='BD'
	 g.字符串的比较运算:比较编码值的大小
	   运算符： > < <= >= !=
	   示例：'A'<'B'      #True
	         'B'<'a'      #True
		 'ABC'>'AB'   #True
		 'AD'<'ABC'   #False
		 'ABC'=='abc' #False
		 "AB"<"ABC"   #True
		 比较规则：从前向后，一旦出现较大值就判断结束
         h.in/not in 运算符
	    作用：
	        in 用于序列，字典，集合中，用于判断某个值是否存在于容器中，
		如果存在返回True,否则返回False
	    格式:对象 in 容器
	    示例：s= 'welcome to tarena'
	          'to' in s  #True
		  'e t' in s #True
		  'c t' in s #False
3.序列函数（字符串，列表，字典）
      1).python常用的序列函数
            2.1 len(s)  返回序列的长度，指的是每一个文字的编码加起来的长度
	         eg:s2="12214"
	            len(s2)
		    输出：5
                    len('a b\nc') #空格，换行，完整的转义字符都算一个字符，故答案为5
		                   如果\后面接的不是转义字符，则为2个字符长度例如\z
            2.2 max()     返回序列的最大值元素
            2.3 min()     返回序列值的最小元素
	    2.4 sum(x)    返回序列中所有元素和（元素必须是数值类型）
	    2.5 any(x)    真值测试，如果容器内其中一个是True则返回True,否则返回False
	    2.6 all(x)    真值测试，容器内所有元素的布尔值均为True,否则返回False
	                  all([]) #True  特例        
      2).数字转字符串函数以及编码转换函数
            3.1 ord()   返回一个字符的Unicode编码值
            2.2 chr(i) 返回i这个值对应的字符，也就是order的反向操作，i是编码值
            3.3 hex(i) 将整数转为十六进制的字符串
            3.4 oct(i) 将整数转换为八进制字符串
            3.5 bin(i) 将整数转换为二进制的字符串
      3).序列的构造函数 Str
            str('obj') 将对象转换为字符串
               示例：
                   s=123
                   print(str(s)+'456')  #123456
	    list([iterable])
	    tuple([iterable])
      4).序列的反转函数
            reversed(iterable)   返回反向顺序的可迭代对象,用于for循环之中
	    如：
		for x in reversed("ABC")
			print(x)   # 打印 C B A 
4.常见的字符串方法
   见:str.html  
   在交互模式中：help(str)
   下面的函数中s代表任意字符串变量
   1字符串方法的调用语法
      对象.方法名(方法传参)
      注:   方法的调用属于表达式，通常可以返回一个值或者None
      示例: 'abc'.isalpha()    #True   alphha是英文字母的意思，中文也是字母
                                       该函数就是判断该字符串是否全为字母。
             123.isalpha()     #False 
    4.1 s.center():把字符串居中显示
	          用法：
		   center(字符串总长度，填充字符)
		 eg: s4="123"
                     s4.center(12,"@")
                    输出：'@@@@123@@@@@'
		     ps:包括输出字符和填充字符，共12个字符
		       若填充字符为空，则默认填充空格。
		       s5="+";
		       print("+"+s5.center(11,"-")+"+")
		    输出：+-----+-----+
		       s6="abc";
		       print(("|"+s6.center(11," "))*2+"|")
		    输出：|    abc    |    abc    |
    4.2 s.count(sub,start,end) 查询字符中子串的个数
            一提到结束基本不包含结束的那个字符
           eg：s='abcdabcaba'
	       s.count('c',3,7) # 返回1
                 注：从指定位开始，到指定位结束，不包含结束那一个，搜索制定字符长度中的所要查找的值
	       
    4.3 s.find('sub',start,end) 查找是否有子串
            start和end和用法与上面一致
           eg:s='abcdabcaba'
	      s.find('hello')   #返回-1，没查找到失败就是-1
              s.find('cd')      #返回2，返回的是第一个字母的索引值，
    4.4 s.strip()     返回去掉左右空白字符的字符串，只管左右的不会删除中间的参数，
                      括号内的参数为什么，就删左右的什么。
        s.lstrip()    返回去掉左边空字符串
	s.rstrip()    返回去掉右边空字符串
    4.5 lower():将所有内容小写
	upper():将所有内容大写
	        eg:s="AbCd"
		    s.lower()
		   输出为：'abcd'
		   upper类似。
    4.6 s.replace(old,new,[count])
             用新字符子串代替老字符子串，count代表着替换的数量，，默认从左向右替换默认为全替换
            eg；s='ABCDABCABA'
	        S.replace('AB','ab',2)  #返回结果为'abCDabCABA'
    4.7 s.startswith(prefix,start,end) #返回s是否是以prefix开头,其中end，start用法和上面相同,返回结果为bool类型
        s.endswith(suffix,start,end)   #返回s是否是以prefix结束,其中end，start用法和上面相同,返回结果为bool类型
    4.8 s.title()    将字符串首字母大写，如果几个单词的话是每个单词都会大写
    4.9 help(s.islower)  可查看函数帮助文档
5.字符串格式化表达式
   5.1 字符串格式化表达式
      运算符：%
      作用：生成一定格式的字符串
      语法： 
           格式化字符串%参数值
	   格式化字符串%(参数值1，参数值2，...)
	   ps:格式字符串中%为占位符。占位符的位置将用参数值替换
      示例1：
           fmt='姓名:_%s_,年龄:_%d_'
           name=input('请输入姓名：')
	  age=int(input('请输入年龄：'))
	  s=fmt % (name,age) #将输入内容输入fmt元组中，输入部分为%s和%d。
	  #输入：小郑
	       20
	  #输出：姓名:_小郑_,年龄:_20_
      示例2:
          'name:%s, age:%d'%("tarena",15)
          #输出:'name:tarena, age:15'
   5.2 格式化字符串中占位符和类型码
        占位符      意义
         %s        字符串，使用str(x)函数转换
         %r        字符串，使用repr(x)函数转换,转换为一个表达式
         %c        整数转化为单个字符  
         %d        十进制整数
         %o        八进制
         %x        十六进制整数(大写)
         %X        十六进制整数(小写)
         %e        指数型浮点数(e小写)   如:2.9e+10
         %E        指数型浮点数(E大写)   如:2.9E+10
         %f,%F	   浮点型十进制形式  默认后面余6位
         %g,%G     十进制形式浮点数或指数浮点数自动转换
                 例："%g" % 3.14  
		     #返回 '3.14'
		     "%g" %  3.1415926
		     #返回"3.1415926e+07"系统认为你小数显示不太方便时自动转换为指数形式
         %%        等同于一个%字符
                 例：i=50
		     s="%d%%" % i
		     #返回：50%  
  5.3 占位符和类型码之间的格式语法
         % [格式语法] 类型码
            格式语法：
	          - 左对齐，无-号会右对齐
		  + 显示正号
		  0 补零
		  宽度(整数)
		  宽度  .精度(整数)
            示例：
	      '%10d' % 123    #'        123'  #10代表宽度包括123，默认填充空格，右对齐
              '%-10d' % 123   #'123        '  #-号左对齐
              '%010d' % 123   #'00000000123'  #填充数字为0，兼容c语言规则，只允许填充左侧
	      '%10s'  % 'abc' #'        abc'
	      '%-5s'  % 'abc' #'abc  '
              '%-5d'  % 123   #'00123'
	      '%7.3f' % 3.1415926   # 003.141' #总共7位，其中小数点后面占3位
       课后习题：输入三行，按照最长的那行右对齐
              s1=input('...')
	      s2=...
	      s3=...
	方法1:
	      m=max(len(s1),len(s2),len(s3))
	      print(' '*(m-len(s1))+s1)
	      print(' '*(m-len(s1))+s2)
	      print(' '*(m-len(s1))+s3)
        方法2:
	      fmt='%%%ds' % m # %%生成一个含有占位符的字符串
	      print('fmt=',fmt)
	      print(fmt % s1)
	      print(fmt % s2)
	      print(fmt % s3)
    5.4 字符串文本解析方法split和join
        S.split(sep=None) 
	   作用：
	       将字符串，使用sep作用分隔符分隔S字符串，返回分隔后的字符串列表，当不给定参数时，默认用空字符作用分隔符分隔
           例子：
	       s="beijing is capital"
	       L=s.split(" ")
               L=["beijing","is","capital"]
	S.join(iterable)  
	   作用：
	       用可迭代对象中的字符串，返回一个中间用S进行分隔的字符串
	   示例：
	       L=["AAAA","BBBB","CCCC"]    #可迭代对象皆可
	       S2="#".join(L)
	       S2="AAAA#BBBB#CCCC"
		