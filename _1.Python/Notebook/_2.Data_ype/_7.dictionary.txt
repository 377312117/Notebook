七.字典
1.基本介绍
    定义:
        1)字典是一种可变容器,可以存储任意数字类型
        2)字典的每个数据都用键(key)来进行检索,
          而不是像序列可以用索引来进行索引
        3)字典的数据没有前后的顺序关系,存储是无序的
        4)字典的数据是以键(key)-值(value)对的形式来进行映射存储
        5)字典的键不能重复,且只能用不可变类型来作为字典的键
            不可变类型:
                    bool,int,float,complex,str
                    tuple,frozenset(固定集合),bytes(字节串)
            可变类型:
                    list,dict,set(集合),bytearray(字节数组)
        6)字典相较于列表,查找数据快,无需担心顺序
    格式:
        表示方式以{}括起来,以(:)分隔键值对,对键值之间用逗号隔开
        整个字典都包括在花括号{}中
		eg: dict={"a":1,"b":2,"c":3}
		    dict["b"]      
			#输出为"3",键位放入方括号中，键位和键值都可以随意设置，
			但键位不可出现两次，不可使用列表，可使用数字，字符串，元组
		    字典中的键值可进行修改和删除
			eg:dict={"a":1,"b":2,"c":3}
			1） dict["a"]=5
			    print(dict["a"])      #返回5
            2） del dict["a"]         #删除a条目
			    dict.clear()         #清空字典所有条目
			    del dict             #删除字典
    创建空字典的字面值:
        d={}  #空字典
    创建非空字典字面值:
        d={"name":"tarena","age":15}
        d={100:'一百'}
        #值为元组
        d={"a":tuple("abc")}
        d={True:"真值"}
        #用元组作为键
        d={(1970,1,1):'计算机元年'}
2.字典的构造函数
    dict()           生成一个空字典
    dict(iterable)   用可迭代对象初始化一个字典
    dict(**kwargs)   用关键字传参形式生成一个字典
                     传参必须是字符串,不能是数字
    示例:
        d=dict()
        #用可迭代对象提供的数据必须是两个元素的序列
        d=dict([("name":"tarena"),("age",15)])
        d=dict(name="tarena",age=15)
        #传参必须是字符串,不能是数字,如果1="one"会报错
3.字典的基本操作:
    字典的键索引:
        语法:
            字典[键]
        作用:
            用[]运算符进行取值操作
        示例:
            d={"name":"tarena","age":16}
            print(d["name"],"今年",d["age"],"岁")
4.添加和修改字典元素
    语法:
        字典[键]=值
    说明:
        键不存在,创建键并绑定对应的值
        键存在,修改绑定的值
    示例:
        d={}
        d["name"]="tarena"  #创建新键值对
        d["age"]=15         #创建新键值对
        d["age"]=16         #修改age键绑定的值
5.删除字典键值对
    语法:
        del 字典[键]
    示例:
        d={"name":"tarena","age":30}
        del d["name"]  #删除键"name"
6.in / not in 运算符
    同其他数据类型类似.,不过检索对象是键key,不能判断值是否存在.
    示例:
        d={"a":100,200:"二百"}
        "a" in d    #True
        100 in d    #False
7.字典的迭代访问
    字典是可迭代对象,字典只能对键进行迭代访问
    示例:
        d={"name":tarena,(2001,1,1):"生日"}
        # k用来绑定字典的键
        for k in d:
            print(k,"对应的值是:"d[k])
8.可以用于字典的内建函数
    字典函数都是针对键值的操作
    1).len(x)   返回字典的键值对的个数
    2).max(x)   返回字典键的最大值
    3).min(x)   返回字典键的最小值
    4).any(x)   真值测试,其中一个键为真值则返回True
    5).all(x)   真值测试,其中一个键为假值则返回False
9.字典方法
    文档参见 字典方法.html
    例:
    d={1:"a",2:"b",3:"c"}
    for k in d.keys()      # k绑定键
    for k in d.values()    # v绑定值
    for t in d.items()     # t绑定元组
    #等同于:  for k,v in d.items()    #k绑定键,v绑定值       
10.字典推导式:
    字典推导式是用可迭代对象依次生成字典内元素的表达式
    语法:
        {键表达式:值表达式 for 变量 in 可迭代对象 [if 真值表达式]}
        []中内容可忽略
    示例:
        #生成一个字典,键为1~9,值为键的平方
        d={x:x**2 for x in range(1,10)}
        {1:1,2:4,3:9.....}
        #有如下字符串:
        L=["tarena","xiaozhang","hello"]
        #生成键为单词,值为单词长度的字典
        D={"tarena":"6","xiaozhang":9,"hello":5}
      思路:
       d={s:len(s) for s in L}
11.字典与列表的比较
    相同点:
        1.都是可变容器
    不同点:
        1.索引方式不同,字典用键索引,列表用整数索引
        2.字典的插入删除和修改的速度可能会快于列表
        3.列表的存储是有序的,字典是无序的