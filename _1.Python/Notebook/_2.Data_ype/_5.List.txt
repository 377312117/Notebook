五、列表：list  
	1.定义：基本数据结构，可以进行索引，切片，加，乘，检查成员，列表数据不需具备相同类型             
	        序列中的每个元素都分配一个数字-他的位置，或索引，第一个索引是0，第二个索引是1，以此类推
		列表存储的是实质上是变量，每个变量又可以绑定数值，变量就是索引值，记录的是每个对象的id地址
		1）列表是一种容器
	        2）列表是一种序列
		3）列表是可以改变被改变的序列：生成后还能被改变
		4）元素和元素间可能没有任何关系，但是有先后顺序
	                eg:list=['asda','fddef','!@#',1678]
		5）与字符串的索引一样，列表的索引从0号开始。列表使用中括号[]，用逗号隔开
			       创建空列表的字面值:
			             L=[]     #L 绑定空列表
			       创建非空列表的字面值：
			             L=[1,2,3,4]
				     L=["Beijing","shanghai","shenzhen"]
				     L=[1,"two",3.3,'四']
				     L=[1,2,[3.1,3.2,3.3],4]
				          #列表中的元素也可以为列表
			       列表的构造函数 list
			       名字个类型名完全一致
			         list()            #等同于生成一个空的列表
			         list(iterable)    #用可迭代对象创建一个列表
			           示例：
				        s=list()
					 # s为空列表[]
				        list("hello")     
					   # 返回['h','e','l','l','o']
					list(range(1,10,2))  
					   # 返回[1,3,5,7,9]
		6）列表类型：
		    字符串   str
		    列表     list
		    元组     tuple
		    字符串   bytes
		    字符数组 bytearray
	2.列表的运算：
		+    #用于拼接列表,按左右顺序排列
		+=   #原列表与右侧列表拼接，并用变量绑定新列表
		     例子：
		          [1,2,3] +=[4,5]     #[1,2,3,4,5]
			  #可加对象为字符串，列表等等,不能为数字类型
			  如果相加的是字符串类型，则将字符串拆分，一个一个字母作为元素添加进列表中
			  [1,2,3]+="abc"       #[1,2,3,'a','b','c']
			  详情见pbase/5.list/3.list.py
		L1+=L2不等同于L1=L1+L2，前面是拼接，在原列表基础上
		      而右边则是生成一个新的列表，两者id地址不一样了
		*    #生成重复列表
			eg:y=[1,2]*3   #x=[1,2,1,2,1,2]
		 *=   #生成重复列表，并给原变量赋值
        3.列表的比较运算：
		 < <= > >= == !=
		 [1,3] >[1,2,4]    #True
		 [5,2] >[5,2,1]    #True,前元素相同，后面有元素的赢
		 ["ABC","123"]<["abc","456"]  
			 # True     与字符串的比较类似
                 与字符串类似，从前面元素开始比较，对应元素大的赢，有先后顺序。
		 比较需要在相同类型的比较，不同对应元素比较类型不同会报错。
	4.列表的in/not in 运算符
	           in 判断一个对象是否在容器中，存在返回True,否则返回False,与字符串类似
	           not in 则与 in 相反 
	       说明：
	           同字符串类似，但是只能判断单个元素是否在列表中
	       示例：
	           x=[1,"two",3.14,'four']
		   3 in x    #True
		   "3"  in x    #False
	5.列表的索引：
	      语法：
	           列表[整数表达式]
	      用法：
	           取值时，等同于字符串的索引操作
		   索引分为正向索引和反向索引，规则和字符串索引规则完全相同
	     5.2 列表的索引赋值（字符串不可进行如此操作）
	           列表是可变序列（与字符串不同），可以通过索引赋值改变列表中的元素,
		   是在原列表基础上进行赋值，不会对原列表的内存地址进行改变。也就是不会生成新列表
		 示例：
		 L=["1",2,3,4]
		 L[2]=3.3  #将第三个元素改为3.3，改变原列表的数据，
		 L[0]=1    #原类型与赋值类型不同类型的也可以进行赋值，改变原列表数据
		 L=[0]=[1,2,3]   #赋值一个列表元素
        6.列表的切片 
	      切片是将原列表切出，重新组成一个列表。
	      语法：
		  列表[a:b:c]   #其中a为开始切片位置，b为结束切片位置，c为步长
	                         与字符串一致，返回的为列表，原类型什么样，切下来还是一样类型
	     6.2 列表的切片赋值                  
                  作用：
		       可以改变原来列表的排序，进行插入和修改数据
		       可以用切片来改变列表的对应元素值
	          语法：
		       列表[]=[可迭代对象],尤其是单个元素必须加中括号，多个元素可不加
		       注：赋值运算符的右侧必须是可迭代对象
		          切片的序列号是可以越界的
		  示例：
		      L=[2,3,4]
		      L[0:1]=[1.1,2.2]    #L=[1.1,2.2,3,4]
		      注：从开始切片位置到结束切片位置（不包括结束位），将可迭代对象完整填充进去
                      L=[2,3,4]
		      L[1:]=[3.3,4.4,5.5]    #L=[2,3.3,4.4,5.5]
		       注：从开始位一直到结束都切下并赋值
		    修改数据：
		      L[:]    #全部切下，包括最后一个元素，生成新列表
		      L[:1]   #位置1以前的序列为0的元素切下
		      L[0:0]=[[1,2,3]]    #切片赋值必须加中括号，如果要赋值列表元素，则在中括号里添加中括号
		    增加数据：
		      L[1:1]  #在序列1与序列2之间插入数值，原序列1不会被替换掉，添加数据
		      L[0:0]    #直接在刚开始前插入元素
		    删除数据：
		      L[2,3]=[]  把序号2的元素删除     
		      L[0:1]=range(5,9)    #用可迭代函数range生成的对象赋值
		         #直接将序号0-3之间添加5,6,7,8
		      L[0:1]='ABCD'      #在0-1之间添加A、B、C、D的元素，也是可迭代对象，依次赋值
	         切片赋值注意事项：
		     对于步长不为1的切片赋值，赋值运算符右侧的可迭代对象提供的元素个数
		     一定要等于切片切片切出的段数
		     eg:
		        l=[1,2,3,4,5,6]
			l[::2]='ABC'   #True
			#以下是切出三段，但是给了5个值填充是错误的。
			l[::2]="ABCDE"
        7.del语句：
	       用于删除列表中的元素，仍然是原来的列表
	     语法：
	         del 序列[整数表达式]
		 del l[-1]   #删除最后一个
		 del l[0]    #删除第一个
		 del l[1:3]  #删除第2到第3个
		 del l[::2]  #每隔步长2删除
        8.常见的列表方法  method
	        详情见 list method.html(魏老师笔记)
		在终端中：   >>> help(list)
		示例见 pbase/list/2.method.py
		   insert    插在索引之前
		   copy      列表只有一个，只不过绑定的变量增加了，仍然是原列表，本质是共用
		   append()  在最后追加，但默认括号中为一个元素，加一个列表则将该列表视为一个元素
		   extend()  类似+=，
		   l.clear() 等同于del l[:]
		   sort    默认升序，降序：l.sort(reverse=True)
                   reverse  反转，等同l[::-1]
		   pop      删除索引对应的值，不加索引默认删除最前的值,相当于拿出索引的值，并不会删除，可用变量绑定改值
		            L=[1,2,3,4]
			    S=l.pop(1)     #S=2
	           remove   删除时是根据列表顺序删的，所以遍历删除时，会存在跳着删的情况，因为移除后元素序列向前挪了一位，非常重要
        9.浅拷贝和深拷贝
	        变量1=变量2   #不复制
		变量=列表2.copy()  #浅拷贝
		  #深拷贝需要导入复制模块
		  import copy
		变量=copy.deepcopy(列表2)  #深拷贝
	        浅拷贝：shallow copy
		    含义：
		         指在对象复制的过程中，只复制一层变量，不会复制深层变量绑定对象的复制过程
	             eg:
		         L=[3.1,3.2]
			 L1=[1,2,L]
			 L2=L1.copy()
			 L2[2][0]=3.14     #等同于：L1[2][0]
			 print(L1)   #[1,2,[3.14,3.2]]
			 print(L2)   #[1,2,[3.14,3.2]]
			 print(L)    #[3.14,3.2]
		深拷贝： 
		     含义：
		         指在对象复制的过程中，复制深层变量绑定对象的复制过程
			 #导入复制模块
		         import copy  
		         L=[3.1,3.2]
			 L1=[1,2,L]
			 L2=copy.deepcopy(L1)   #深拷贝
			 L[0]=3.14     #L2不变，L1改变
			 print(L1)   #[1,2,[3.14,3.2]]
			 print(L2)   #[1,2,[3.1,3.2]]
			 print(L)    #[3.14,3.2]
	10.列表和字符串的比较
	     相同之处：
	             都是序列，元素之间有先后顺序关系，都是可迭代对象
              不同之处：
	             字符串是不可变序列
		     列表是可变序列
		     字符串中每个元素都只能存储字符(编码)，而列表可存储任何类型
        11.列表推导式
	       列表推导式是用可迭代对象创建列表的表达式
	       作用：
	            用简易方法生成列表
	       语法：
	            [表达式 for 变量 in 可迭代对象]
		   或
		    [表达式 for 变量 in 可迭代对象 if 真值表达式] 
	      示例：
	           #以下生成一个数值为1~9的平方的列表
		     [1,4,9,16,25......81]
		     L=[x**2 for x in range(1,10)]
		   #此例子示例生成一个１～９的平方的列表，只保留偶数
                      L=[x**2 for x in range(1,10) if x%2==0]
                        # L=[4,16,36,64]
		          先迭代，再判断，再输出
           列表推导式的嵌套：
	       [表达式1 for 变量1 in 可迭代对象 if 真值表达式1 for 变量2 in 可迭代对象2 if 真值表达式2.....]
	       示例：
	           将列表[10,20,30]中的元素和列表[1,2,3]元素分别相加，将得到的元素放在一个列表中
		     L=[x+y for x in [10,20,30] for y in [1,2,3]]
		     L=[11, 12, 13, 21, 22, 23, 31, 32, 33]
           