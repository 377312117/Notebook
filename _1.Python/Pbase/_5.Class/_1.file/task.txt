迭代器 Iterator
1.迭代器
    定义:
            访问可迭代对象的工具
            是指用iter(obj) 函数返回的对象(实例)
            可以用next(it)函数获取可迭代对象的数据
    2.迭代器函数
        iter(iterable)  从可迭代对象返回一个迭代器,iterable必须能提供一个迭代器的对象
        next(iterator)  从迭代器iterator 中获取下一条记录,如果无法获取下一条记录,则触发StopIterator异常通知
    说明:
        迭代器只会向前取值,不会后退
    示例:
        L = [1,3,5,7]
        it = iter(L)  #让iter 函数从L中获取迭代器
                      # it   绑定的是迭代器
        print(next(it))  # 1
        print(next(it))  # 3
        print(next(it))  # 5
        print(next(it))  # 7
        print(next(it))  # 报错,数据迭代完了以后触发StopIteration异常
    示例:
        #用迭代器和while代替for循环
        见 __1.iterator
2.生成器
    定义:
        Generator
        生成器是能够动态提供数据的可迭代对象
        生成器在运行时生成数据,与容器不同,它通常不会在内存中保存大量的数据
        ,而是现用现生成
    生成器有两种:
        1.生成器函数
        2.生成器表达式
    生成器函数:
        含有yield语句的函数是生成器函数,此函数被调用将返回一个生成器对象
            yield翻译为(产生或生成)
            1.返回的是生成器对象,生成器对象也是可迭代对象
            2.执行顺序与普通函数不同
                1)当next(it)函数调用时,生成器函数才执行
                1)当遇到yield语句时,保存当前函数的执行状态
    yield 语句
        语法:
            yield 表达式
        说明:
            yield用于def函数中,目的是将此函数作用生成器函数使用
            yield用来生成数据,供迭代器的next(it)函数取值
        示例:
            _5.gen_function.py
            _6.gen_function.py
    生成器函数说明:
        1.生成器函数调用将返回一个生成器对象,生成器对象是可迭代对象
        2.在生成器函数内调用return语句会触发一个StopIteration异常(即生成器结束)
    生成器函数的应用示例:
        示例:
            _7.myinteger.py
    生成器表达式:
        语法:
            (表达式 for 变量 in 可迭代对象 [if 真值表达式])
        说明:
            if 子句 可以省略
        作用:
            用推导式形式创建一个新的生成器
        示例:
            gen = (x ** 2 for x in range(1,5))
            it = iter(gen)
            next(it)   # 1
            next(it)   # 4
            next(it)   # 9
            next(it)   # 16
            next(it)   # 触发StopIterator异常通知
        示例:
            _10.exe_gen.py
3.迭代工具函数
    zip 函数
            zip(iter[,iter2,....] 
            返回一个zip生成器对象,此对象用于生成元组,元组的数据分别来自
            于参数的每个可迭代对象,生成元组的个数由最小的可迭代对象大小决定
        示例:
            numbers=[10086,10000,10010,95588]
            names = ["中国移动","中国电信","中国联通"]
            for t in zip(numbers,names)
                print(t)
            # (10086,"中国移动")
            # (10000."中国电信")
            # (10010,"中国联通")
            d = dict(zip(numbers,names))
            #生成以numbers中的为键,names为值的字典
        zip 函数的实现(用生成器函数实现)
            示例见:
                _12.myzip.py
    enumerate(iterable,start=0)
            返回一个enumerate生成器对象,此对象生成类型为(索引值)的元组,默认索引从零开始,
            也可以用start指定
        示例:
            name = ["中国移动","中国电信","中国联通"]
            for  t in enumerate(names):
                print(t)   # (0,"中国移动"),(1,"中国电信"),.....
            for  t in enumerate(names,100):  
                print(t)   # 从100开始
  