操作文件和目录
    使用模块
        系统内置模块 OS
    作用:
        在 Python 程序中执行这些目录和文件的操作

一些常见方法
            方法名                                  功能
            os.name                                 操作系统类型,其中posix为linux/unix,nt为windows
            os.uname()                              详细的系统信息,在windows上不提供
            os.environ                              操作系统中定义的环境变量
            os.environ.get('key')                   获取某个环境变量的值
                例如:
                    >>> os.environ.get('PATH')
                    '/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/opt/X11/bin:/usr/local/mysql/bin'  
            os.getcwd()                             返回当前工作路径
            os.chadir("/路径")                      切换工作路径 ,如果遇到转义符情况记得用r""
            os.path.abspath('.')                    查看当前目录的绝对路径  
            os.path.join('/路径', 'testdir')        在某个目录下创建一个新目录,首先把新目录的完整路径表示出来,并不要求真实存在
                # 把两个路径合成一个时,不要直接拼字符串,而要通过 os.path.join()函数,这样可以正确处理不同操作系统的路径分隔符。
            os.mkdir('/Users/michael/testdir')      创建一个目录   ,可用绝对路径和相对路径
            os.rmdir('/Users/michael/testdir')      删除一个目录   
            os.path.split("路径")                     这样可以把一个路径拆分为两部分,后一部分总是最后级别的目录或文件名
                示例:
                    >>> os.path.split('/Users/michael/testdir/file.txt')
                        ('/Users/michael/testdir', 'file.txt')
            os.path.splitext()                       可以直接让你得到文件扩展名
                示例:
                    >>> os.path.splitext('/path/to/file.txt')
                        ('/path/to/file', '.txt')
            os.rename('test.txt', 'test.py')        对文件重命名
            os.remove('test.py')                    删掉文件
            *复制文件
            需导入模块shutil
            shutil.copyfile("1.txt",'2.txt')        复制文件,可在相应的参数上加上路径
            os.path.isfile()                        返回文件的名称(字符串)组成的列表
            