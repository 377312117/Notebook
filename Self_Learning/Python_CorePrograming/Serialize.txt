序列化
        我们把变量从内存中变成可存储或传输的过程称之为序列化,在 Python中叫 pickling.
        序列化之后,就可以把序列化后的内容写入磁盘,或者通过网络传输到别的机器上
        反过来,把变量内容从序列化的对象重新读到内存里称之为反序列化,即 unpickling
    使用模块
        pickle
        pickle下的方法
            pickle.dumps() 
                    把任意对象序列化成一个 bytes ,然后,就可以把这
                    个 bytes 写入文件。或者用另一个方法 pickle.dump() 直接把对象序列化
                    后写入一个 file-like Object.
                示例:
                    >>> import pickle
                    >>> d = dict(name='Bob', age=20, score=88)
                    >>> pickle.dumps(d)
                        b'\x80\x03}q\x00(X\x03\x00\x00\x00ageq\x01K\x14X\x05\x00\x00\x00score
                        q\x02KXX\x04\x00\x00\x00nameq\x03X\x03\x00\x00\x00Bobq\x04u.'
                    >>> f = open('dump.txt', 'wb')
                    >>> pickle.dump(d, f) 
                    >>> f.close()  
            pickle.loads()
                    当我们要把对象从磁盘读到内存时,可以先把内容读到一个 bytes ,然
                    后用 pickle.loads() 方法反序列化出对象
                    >>> f = open('dump.txt', 'rb')
                    >>> d = pickle.load(f)
                    >>> f.close()
                    >>> d
                    {'age': 20, 'score': 88, 'name': 'Bob'}
                只能用 Pickle 保存那些不重要的数据,不能成功地反序列化也没关系。
JSON    
        如果我们要在不同的编程语言之间传递对象,就必须把对象序列化为标
        准格式,比如 XML,但更好的方法是序列化为 JSON,因为 JSON 表示
        出来就是一个字符串,可以被所有语言读取,也可以方便地存储到磁盘
        或者通过网络传输。JSON 不仅是标准格式,并且比 XML 更快,而且
        可以直接在 Web 页面中读取,非常方便。
        JSON 表示的对象就是标准的 JavaScript 语言的对象,JSON 和 Python
        内置的数据类型对应如下:
        JSON 类型       Python 类型
        {}              dict
        []              list
        "string"        str
        1234.56         int 或 float
        true/false      True/False
        null            None
    json模块
            Python 内置的 json 模块提供了非常完善的 Python 对象到 JSON 格式的
            转换。我们先看看如何把 Python 对象变成一个 JSON:
        json.dump()
            >>> import json
            >>> d = dict(name='Bob', age=20, score=88)
            >>> json.dumps(d)
                '{"age": 20, "score": 88, "name": "Bob"}'
            dumps() 方法返回一个 str ,内容就是标准的 JSON。类似的, dump() 方法
            可以直接把 JSON 写入一个 file-like Object 。      
        json.loads()
            要把 JSON 反序列化为 Python 对象,用 loads() 或者对应的 load() 方法,
            前者把 JSON 的字符串反序列化,后者从 file-like Object 中读取字符
            串并反序列化.
            示例
                >>> json_str = '{"age": 20, "score": 88, "name": "Bob"}'
                >>> json.loads(json_str)
                    {'age': 20, 'score': 88, 'name': 'Bob'}
                    由于 JSON 标准规定 JSON 编码是 UTF-8,所以我们总是能正确地在
                    Python 的 str 与 JSON 的字符串之间转换。