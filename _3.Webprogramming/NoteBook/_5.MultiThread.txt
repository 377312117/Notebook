多线程
    定义
        线程也是多任务编程方法
        也可以使用计算机的多核资源
        线程被称为轻量级的进程
        线程是系统分配内核的最小工作单元
    线程特征
        一个进程可以包含多个线程
        线程是一个运行的过程,消耗计算机资源
        多个线程的执行相互不影响不干扰
        线程的创建销毁,消耗的资源远远小于进程
        每个线程页也有自己特有的特征,比如ID,指令集等
threading 模块创建线程
    实例详解
        from threading import Thread
        t =Thread()
            功能    创建线程对象
            参数    target  绑定线程函数
            args    元组    给线程函数位置传参
            kwargs  字典    给线程函数键值传参
            name    线程名称 默认为Thread-1
        t.start()  启动线程
        t.join([timeout])  回收线程
    示例:
        _1,_2
线程对象属性
    t.name        线程名称
    t.setName()   设置名称
    t.getname()   获取名称
    t.threading.currentThread()     在线程函数中获取当前线程对象
    t.daemon      默认为False,此时主线程退出,分支线程继续执行
                  如果设置为True,则主线程退出,分支线程也随之退出
    t.setDaemon(True)  设置Daemon属性
        或者t.daemon = True
    t.isDaemon()     判断Daemon属性
    示例;
        _3
创建自己的进程类
    步骤
        添加Thread
        添加自己属性写__init__,加载父类的init
        重写run方法
        使用自己的类生成线程对象,调用start启动线程,此时会自动执行run方法,作为线程执行
    示例:
        _4
线程间通信
    通信方法
        使用进程空间中全局变量通信
    注意事项
        共享资源的争夺,往往需要同步互斥机制协调
    线程的同步互斥
        共享资源
            多个线程都可以操作的资源称为共享资源
        临界区
            指一段代码,对临界资源操作代码段称为临界区
        同步
            同步是一种合作关系,为完成任务,多进程和线程形成一种协调,
            按照必要的步骤有序执行操作临界资源
        互斥
            互斥是一种制约关系,当一个进程或者线程使用临界资源会进行加锁处理,此时
            另一个进程或者线程无法操作临界资源,直到解锁后才能操作
    线程的同步互斥方法
        线程  Event  
                from threading import Event
                e = Event()     创建线程event对象
                e.wait([timeout])
                    功能  阻塞函数,等待e被设置
                    参数  超时时间
                e.set()    将e变为设置状态
                e.clear()  将e变为未设置状态,被设置返回True,否则是False
                is_set()
            示例:
                _5,_6
        线程锁  Lock
                from threading import Lock
                lock = Lock()  创建锁对象
                lock.acquire()  上锁,如果已经上锁调用此函数会阻塞
                lock.release()   解锁
                with lock:    # 上锁操作
                    ...
                        with语句块结束后自动解锁  with是生成对象的意思
            示例:
                _7
    Python线程的GIL问题(全局解释器锁)
        GIL:由于python解释器设计中加入了解释器锁,导致解释器在同一时刻只能解释一个线程
            所以大大降低了python的执行效率
        后果
            python 线程一般会用在存在大量的阻塞的IO程序或者高延迟的IO程序中(消息收发)
        测试:
            _8-_11
            多进程在高密集io和cpu处理上,均有较高效率
多进程和多线程之间的区别和联系
    相同点
        两者都是多任务编程方式,都能够使用计算机的多核
        进程和线程都在系统中有子集的特有属性标志,如id,代码段,命令集等
    不同点
        1.进程的创建和消耗的计算机资源比线程要多
        2.进程空间独立,数据互不干扰,有专门的通信方法,
          而线程使用全局变量进行通信
        3.一个进程可以创建多个线程分支,两者为包含关系
        4.多个线程共用进程资源,在共享资源操作时往往需要同步互斥操作
使用场景
    用多线程:
        1.多个小任务组成一个任务用多线程,还有io高延迟的场景
        2.某个任务中并发比较多,此时多线程消耗资源较少
    用多进程
        1.不同的独立的任务模块,用多进程相对空间比较好管理
        2.在通信上要考虑可行性,如果数据逻辑比较复杂,
          需要同步互斥较多,用多线程可能容易出错,可合理使用多进程
        3.如果是无延迟的cpu密集型程序,使用多进程较好,因为线程的GIL锁问题
