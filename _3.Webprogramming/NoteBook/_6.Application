网络通信模型
服务器
    硬件服务器
        主机  集群
    软件服务器
        编写的服务端应用程序,在硬件服务器上运行,提供一定的后端服务
        httpserver  处理http请求
        webserver   网站的后端服务程序
        邮箱服务器    邮件处理
        ftp服务器    文件处理
前端   用户端     客户端(一般移动端)     前台应用(pc)
    特征 : 与用户直接交互,提供给用户使用
    要求: 良好的用户体验
后端   服务端   后台应用
    特征:
        提供逻辑处理,数据处理
    要求:
        更高的并发量,更快的处理速度,更强的安全性
服务器模型
    服务器的基本结构:  c/s  客户端服务器模型
                    b/s  浏览器服务器模型
网络通信模型
    循环服务器模型:
            循环接收客户端请求,处理请求,同一时刻只能处理一个请求,处理完毕处理下一个
        优点:
            实现简单,逻辑简单占用资源较少
        缺点:
            无法同时处理多个客户端请求
        使用情况:
            处理的任务可以很快完成,不需要建立并发,udp比tcp更适合循环模型
    并发服务器模型
        IO并发 : io多路复用
            优点:
                资源消耗少,能同时处理多个IO
            缺点:
                只能监控IO事件,当多个任务都是cpu计算时们无法同时处理
        多进程多线程并发
            优点:
                每个客户端都可以都可以长期占有服务器,能使用多个资源处理IO或者cpu计算
            缺点
                资源消耗较高
多进程并发
    基于fork完成多进程并发
        步骤
            1.创建套接字,绑定,监听
            2.等待接收客户端连接请求 accept
            3.当有新的客户端连接时,创建新的进程处理客户端请求
            4.原有进程继续等待其他客户端连接,新的进程处理客户端具体请求
            5.如果客户端退出,则销毁对应的进程
        示例 _1

ftp文件服务器
    功能
        1.服务端和客户端分为两部分,要求启动服务器后可以有多个客户端同时操作
        2.客户端可以查看服务器文件库中有什么文件,文件库只有普通文件,不算隐藏文件
        3.客户端可以选择文件库的文件进行下载,下载到本地
        4.客户端还可以上传本地文件到服务器文件夹(不设权限)
        5.使用print方式打印一定的格式,作为命令的输入提示界面
    技术分析 
        os.listdir()
        os.path.isfile()
        fork并发
        tcp传输
        如何查看一个文件夹中的文件列表
*****************************************************
自我设计
    结构设计
        使用类封装
    工作步骤
        先搭建网络连接
        设计类
        将功能函数写在类中,逐一实现并测试
    分析客户端,服务端该做什么事情
        客户端:
            登录
            查看文件列表
            选择下级文件夹进行查看
            选择路径然后查看
            判断是文件然后可以点击下载
            可以进行上传文件
            退出
            (拓展:可以进行文件夹的上传下载
                 可以进行文件/文件夹的增删改查(无权限只能进行查看)
                 可以进行在线预览
                 可以进行文件的分享和查看详细信息)
        服务端:
            接收多个服务端的登录
            分配登录之后的权限,查看客户端登录地址
            管理后台文件列表,
            客户端的操作都能查看
            打印一定的格式以供客户端查看并且操作
        4.下载文件
            客户端
                发送请求  G  filename
                接收服务端确认
                接收文件
            服务端
                接受请求
                判断文件是否存在,反馈结果
                发送文件
*********************************************************************
结构设计: 使用类将功能封装
工作步骤：先搭建网络连接
          设计类
          将功能函数写在类中，逐一实现并测试

具体功能 ： 1.搭建网络连接
 		服务端 ： 创建fork并发服务端程序	
	        客户端 ： 创建套接字，进行网络连接，连接成功后                           打印命令选项界面等待输入命令
    
            2.设计类

            3. 查看文件列表 
                客户端 ： 发送请求
                          接收服务端确认
                          循环接收服务器发来的文件名并打印

                服务端： 接收请求
                         判断可否执行反馈结果
                         发送文件名称  
            
            4. 下载文件
                 客户端 ： 发送请求  G filename
                           接收服务端确认
                           接收文件
                 
                 服务端 ： 接收请求
                           判断文件是否存在，反馈结果
                           发送文件
多线程并发
    基于threading模块
        1. 创建套接字，绑定监听
        2. 接收客户端请求
        3. 创建新的线程处理客户端请求
        4. 主线程继续等待其他客户端连接，分支线程处理具体请求
        5. 当客户端退出则线程退出
    作业 ： 整理ftp文件服务器程序
            复习http协议
            基于Process的多进程并发服务端
集成模块完成多进程或多线程的并发
    模块
        socketserver
    功能
        通过模块的不同类的组合，完成多进程或者多线程的tcp或者udp的并发程序
    常用函数
        import socketserver
        StreamRequestHandler        完成流式套接字的请求
        DatagramRequestHandler      完成数据报套接字请求
        TCPserver                   创建tcp套接字服务
        UDPserver                   创建udp套接字请求
        threadingMixIn              创建多线程并发程序
    使用步骤
        1，创建服务器类，通过选择继承模块的TCPserver或者UDPServer确定服务器类型
           多进程或者多线程确定并发类型
        2.创建请求处理类，根据服务器类型选择继承流式套接字处理类还是数据表套接字处理类
        3.通过服务器类创建服务器对象，并绑定请求处理类
        4.通过serve_forever()情动服务器，等待连接请求
http 2.0
        接受客户端请求
        解析客户端请求
        组织数据，以http响应格式发送
        将数据发送给浏览器
    升级点:
        1.采用多线程并发，可以满足多个客户端同时发起请求
        2.基本的请求解析，根据具体请求内容返回相应的网页
        3.除了访问网页，还可以让客户端获取一些数据
        4.将整体功能封装为类
    技术点
        1.使用socket tcp 套接字传输
        2.使用多线程作为并发
        3.类的封装构建
        4.熟悉http协议的请求和响应格式
    示例：
        _4
协程基础
    定义
        纤程，微线程。是为了非抢占式多任务产生子程序的计算机程序组件
        携程允许不同入口点在不同位置暂停或者开始，简单来说，协程可以暂停执行函数
        yeild 实现生成器的跳转是协程现象的基本体现
    示例:简单的协程
        _5
    协程原理
        记录一个函数的上下文栈，协调调度切换时，将记录的上下文栈保存起来，
        在切换回来时进行调取，回复原有的执行内容，因此可以从上次执行的位置继续执行
    协程优点
        1.协程是一个单线程的程序，占用计算机的资源很少
        2.协程无需进行切换开销
        3.协程内无需同步互斥
        4.协程更适合于完成高并发的任务
    协程缺点
        1.无法利用计算机的多核资源
    实现函数：
        greenlet
            安装：
                sudo pip3 install greenlet
            greenlet.greenlet(fun)
                功能
                    生成协程对象
                参数
                    协程函数
            g.switch()
                功能
                    选择要执行的协程事件
        gevent
            1.将协程事件封装为函数
            2.生成协程对象
                gevent.spawn(fun,argv)
                    参数
                        fun  协程函数
                        argv 给协程函数传参（不定参数）
                    返回值
                        返回协程对象
                    示例：
                        _6
            3.协程回收
                gevent.joinall(list,[timeout])
                    参数
                        阻塞等待回收协程
                    参数
                        list     要回收的协程列表
                        timeout  阻塞等待超时
                    示例:
                        _7
                gevent.sleep()
                    gevent阻塞，可以使协程跳转
                说明：
                    无论有多少协程在程序中，同一时间只能有一个任务执行
                    且协程不会阻碍主进程的执行
                monkey脚本
                    from gevent import monkey
                    monkey.patch.all()
                    *修改了原有socket代码行为，必须在socket导入前执行
                     使原有的阻塞行为变为了可跳转的协程程序
                    示例：
                        _8
    作业：
        整理进程，线程，网络所学内容，复习mysql




