正则表达式  regex
    定义
        1) 正则表达式 为高级的文本匹配模式,为匹配、抽取、与/或文本形式的搜索和替换功能提供了基础。
        2) 是一些由字符和特殊符号组成的字符串,它们描述了模式的重复或者表述多个字符,
           于是正则表达式能按照某种模式匹配一系列有相似特征的字符串
        3) Python 通过标准库中的 re 模块来支持正则表达式。
    匹配模式
        "搜索”(searching):
            即在字符串任意部分中搜索匹配的模式;
            搜索通过 search()函数或方法来实现
        “匹配”(matching)
            是指判断一个字符串能否从起始处全部或者部分地匹配某个模式。
            匹配通过调用 match()函数或方法实现
    *重要内容:
        P5-P6 常见正则表达式符号和特殊字符
    匹配原理
        由普通字符和特殊符号组成,通过描述字符的重复和位置种类等行为达到匹配某一类字符串的目的
    目标
        熟练掌握正则表达式
        读懂常见的正则表达式,编写基本的搜索提取功能正则
        熟练的使用re模块操作正则表达式
    优点
        方便文本处理
        支持语言众多
        使用灵活,变化多样
    re模块 
        import re
        re.findall(pattern,string)
            提取所有的正则匹配内容
        参数
            pattern   正则表达式
            string    目标字符串
重要符号解析:
    普通字符
        元字符 a, B, c,
        匹配规则: 每个字符匹配对应的字符,匹配的是连续的整体进行匹配
        示例
            re.findall("ac","abcdef")
            返回    []
    "|" 或:
            择一匹配 ,也称为 并(union)  或者 逻辑或(logical OR)
        示例:
            re.findall('ab|ef',"abcdef")
            返回    ['ab','ef']
            注意:有空格的话会连着空格一起匹配
    "." :
            匹配除了换行符\n 以外的任何一个字符
            无论字母、数字、空格(并不包括“\n”换行符)、可打印字符、
            不可打印字符,还是一个符号,使用点号都能够匹配它们
        示例:
            f.o     匹配在字母“f”和“o”之间的任意一个字符;例如 fao、f9o、f#o 等
        注意:
            匹配句点和句号需加上\, 例如"\."
    "^"或者"\A":
            匹配字符串的开始位置
            后者主要用于那些没有脱字符的键盘(例如,某些国际键盘)
        示例:
            ^From           任何以 From 作为起始的字符串
            re,findall("^hello",'jame Hello')
            返回    []
    "$"或者"\Z":
            匹配字符串末尾的位置
        示例:
            /bin/tcsh$      任何以/bin/tcsh 作为结尾的字符串
            ^Subject: hi$   任何由单独的字符串 Subject: hi 构成的字符串
        说明:
            如果想要逐字匹配这些字符中的任何一个(或者全部),就必须使用反斜线进
            行转义。例如,如果你想要匹配任何以美元符号结尾的字符串,一个可行的正则表达式方案
            就是使用模式.*\$$
    "\b" 或者"\B":
            \b 将用于匹配一个单词的边界,这意味着如果一个模式必须位于单词的起始部分,
                就不管该单词前面(单词位于字符串中间)是否有任何字符(单词位于行首)
            \B 将匹配出现在一个单词中间的模式(即不是单词边界)
        示例:
            \bthe           任何以 the 开始或结束的单词            
            \Bthe           任何包含但并不以 the 作为边界的单词
            the             任何包含 the 的字符串
            \bthe\b         仅仅匹配单词 the
    "[]" :
            能够匹配一对方括号中包含的任何一个字符
        示例:
            b[aeiu]t        匹配bat、bet、bit、but
    "[-]" :
            方括号中两个符号中间用连字符(-)连接,用于指定一个字符的范围
        示例:
            z.[0-9]         字母“z”后面跟着任何一个字符,然后跟着一个数字
            [a-z],[A-Z]类似,单列的字符和匹配的一个范围可放在一起,但是单列一般放前面
                比如[123a-z]
            [''-a]           在一个 ASCII 系统中,所有字符都位于“”和“a”之间,即 34~97 之间
            [^\t\n]         不匹配制表符或者\n
            [A-Z]+[a-z]*    匹配大写字母开头,后面接0或多个小写字母的单词
    [^...]:
            匹配除了字符集中的任意一个字符
        示例
            [^abc]   --> 除了a b c以外的任意一个字符
            [^ ]+    --> 除了空格以外的一次或多次的字符
                re.findall("[^ ]+",'This is A Test')
                返回:['This', 'is', 'A', 'Test']
            [^0-9]+  --> 除了0-9以外的一次或多次字符
                re.findall("[^0-9]+",'9 + 10 = 19')
                返回:[' + ', ' = ']    空格也是字符
    "*" :
            匹配其左边的正则表达式出现零次或者多次的情况,也称之为 Kleene闭包
        示例:
            fo*  --> f,fo,fooooooooo    o与*当做整体看待
            re.findall("fo*",'fooooafddfgfoo')
            返回    ['foooo','f','f','foo']
    "+" :
            加号(+)操作符将匹配一次或者多次出现的正则表达式(也叫做正闭包操作符)
        示例
            re.findall("fo+",'fooooafddfgfoo')
            返回    ['foooo','fo']
            注:.+可匹配任意字符串
               .*除了匹配整个字符,还能匹配一个空字符串
    "?" :
            将匹配零次或者一次出现的正则表达式
        示例:
            [dn]ot?         字母“d”或者“n",后面跟着一个“o”,然后是最多一个“t”,例如,do、no、dot、not
            fo?     ==>  匹配 f 或者fo
    "{}" :
            里面或者是单个值或者是一对由逗号分隔的值
            这将最终精确地匹配前面的正则表达式 N 次(如果是{N})或者一定范围的次数;
            例如,{M , N}将匹配 M~N 次出现
        示例
            fo{3}    ---> fooo  o出现三次
            re.findall('fo{3}',"foooooasdfoo")
            返回    ['fooo']
        示例2:
            {m,n}
            re.findall('fo{2,4}',"fooooasdfoofo")
            返回 ['foooo','foo']   三次也会出现,但是有4次优先匹配,3次不再展现
        注意:
            注意,在之前的表格中曾经多次使用问号(重载),这意味着要么匹配 0 次,要么匹配 1
            次,或者其他含义:如果问号紧跟在任何使用闭合操作符的匹配后面,它将直接要求正则表
            达式引擎匹配尽可能少的次数。“尽可能少的次数”是什么意思?
            当模式匹配使用分组操作符时,正则表达式引擎将试图“吸收”匹配
            该模式的尽可能多的字符。这通常被叫做贪婪匹配。
            问号要求正则表达式引擎去“偷懒”,如果可能,就在当前的正则表达式中尽可能少地匹配字符,
            留下尽可能多的字符给后面的模式(如果存在)。
    \d或者\D: 
            匹配任意数字或者非数字
        匹配规则
            \d      匹配任意数字字符  等同 [0-9]
            \D      匹配任意非数字字符 等同[^0-9]
        示例:
            匹配电话号码
            re.find.all('1\d{10}','13844668899')
            返回    ['13844668899']
    "\w"或\W:
          \w匹配任意普通字符,可匹配汉字 等同于[0-9a-zA-Z] 
          \W匹配任意非普通字符
        示例
            re.findall('\w+','PORT#10035.Error 44% down')
            返回['PORT','10035','Error','44','down']
    \s 或\S:
            \s   匹配任意空字符    [\r\n\t\v\f]
            \S   匹配任意非空字符  
        示例
            re.findall('\w+\s+\w+',''hello      world'')
            返回['hello      world']   
            如果没有\s+ 则必须要写相对应的空格数才能匹配
    \A  \Z 
        匹配字符串的位置'
        \A      匹配字符串开头位置
        \Z      匹配字符串结尾位置
        示例 
            \A\d+-\d+\Z,   将整个字符串匹配
    绝对匹配
        当正则表达式前有^后有$时,表示这个正则表达式一定要匹配目标内容字符串的全部内容
        否则就什么读不匹配
    元字符分类
        匹配单个字符  a   A  .  [...] \d \D \w \W \s  \S
        匹配重复     *  +  ? {} {M,N}
        匹配位置     ^   $  \A   \Z   \B \b
        其他    |  () \
    正则表达式转义
        想匹配特殊符号本身则需要加\作为转义
        在正则表达式前加上r'',则会匹配原生字符串,不会认为\b为退格,\n为换行
        r'\bis\b'匹配的就是单词is本身
        python字符串      正则           目标字符串
           '\\$\\d+'     \$\d+           $10
        raw字符串  ,不对字符串进行转义处理
          '\\$\\d+'      ==>   r'\$\d+'
贪婪匹配和非贪婪匹配
    正则表达式的重复匹配默认总是尽可能的向后匹配更多的内容
        * + ? {m,n}
    非贪婪(懒惰模式):
        尽可能少的匹配内容
        在正则表达式后面添加?则可以做到非贪婪模式

正则表达式分组
        使用小括号(),可以为正则表达式建立内部分组,子组为正则表达式的一部分,可以看做一个内部整体
        有子组的正则表达式仍然是整体去匹配内容,子组需要在整体能够匹配到内容的前提下发挥作用
    作用
        作为内部整体可以去改变某些元字符的行为
        子组在匹配到内容的情况下可以单独提取
    示例
        re.search("(ab)+\d+",'ababab1234').group()
        返回    ababab1234 将ab作为一个整体
    示例2
        re.search(r'\w+@\w+\.(cn|com)'),"Wangwc@tedu.com").group()
            返回 Wangwc@tedu.com
                 如果不加(),则会将前面整个部分和com作为两部分
                 加了()后则表示前面部分和括号内两者的组合
    示例3
        re.search(r'(http|https|ftp)')
    子组注意事项
        一个正则表达式中可以有多个子组
        子组一般由外到内,由左到右记为第一第二...子组
        子组不要重叠或者嵌套过多
    捕获组合非捕获组
        (?P<name>ab)    为子组ab起名
        作用
            名字可以表达一定的含义,也可以通过名字获取子组的内容
            匹配身份证 re.search(r'\d{17}(X|\d)','...')group()

正则表达式设计原则
    正确性:能够正确的匹配出目标字符串
    排他性:除了要匹配的内容,尽可能不会匹配到其他内容
    全面性:尽可能对目标字串各种情况考虑全面,做到不遗漏

re模块
    regex = complie(pattern,flags = 0)
        功能    生成正则表达式对象
        参数    flags 功能标志位,丰富正则表达式的匹配功能
        返回值   正则表达式对象
    re.findall(pattern,string,flags=0)
        功能    从目标字符串提取所有正则匹配内容
        参数    pattern 正则
               string  目标子串
               flags    功能标志
        返回值  返回匹配到的内容列表
                如果正则表达式有子组,则只获取子组的内容
    regex.findall(pattern,pos,endpos)
        功能    提取所有的正则匹配内容
        参数    string  目标字符串
                pos     截取目标字符的起始位置
                endpos  截取目标的终止位置
        返回值   返回匹配到的内容
                如果正则表达式有子组,则只获取子组的内容
    
    re.split(pattern,string,flags)
        功能    使用正则表达式匹配部分切割目标字符串
        返回值   列表,切割的部分

    re.sub(pattern,replaceStr,string,max,flags)
        功能    使用字符串替换正则匹配内容
        参数    replaceStr : 替换的字符串
        max     最多替换几处
        返回值   返回替换后的字符串
    
    re.finditer()
        功能    使用正则表达式匹配目标字符串
        返回值:  迭代字对象
        示例
            _2
    re.fullmatch(pattern,string,flags)
        功能    绝对匹配目标字符串
        返回值  match对象
        示例
            _2
    
    re.match(pattern,string,flags)
        功能    匹配目标字符串的开头位置
        返回值  match对象
    
    re.search(pattern,string,flags)
        功能    匹配目标字符串的第一处匹配内容
        返回值  match对象

regex对象的属性
    groups   表达子组个数
    groupindex  生成捕获组名和对应第几组的键值对构成的字典
作业
    熟记正则表达式元字符
    找一个文档,使用正则表达式匹配其中的大写字母开头的单词,匹配所有数字  123   1.23 -1 -1.23  45%  1/2
    使用regex对象调用函数复习函数使用

match对象属性变量和属性方法
    属性变量
        pos
            目标字符串的开始位置
        endpos
            目标字符串的结束位置
        re
            正则表达式
        string
            目标字符串
        lastgroup
            最后一组的组名
        lastindex
            最后一组是第几组
    属性方法
        span()
            匹配内容的起始位置
        start()
            匹配内容的开始位置
        end()
            匹配内容的结束位置
        group()
            获取match对象的对应内容
            参数
                默认为0,表示获取整个正则匹配到的内容
                如果为序列号或者子组名,则表示获取了整个子组的对应内容
        groupdict()
            获取捕获组字典,组名作为键,内容作为值
        groups()
            获取每个子组对应的内容

flags参数的使用
    使用函数
        re.compile ,re.findall  re.search re.match
        re.finditer  re.fullmatch re.sub  re.subn   re.split
    作用
        辅助正则表达式 丰富匹配效果
    
    I ==  IGNORECASE        匹配时忽略字母大小写
    S ==  DOTALL            作用于元字符.   使.可以匹配换行
    M == MULTILINE          作用于^ $ 使其匹配每一行的开头结尾
    X == VERBOSE                   作用于多行正则表达式,在表达式里可以添加注释
    同时使用多个标志位
        使用|, 如re.I|re.S