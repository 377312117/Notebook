内容安排
    网络编程
    进程线程
    正则表达式
    mongodb数据库
    git使用
    项目
网络编程
    数据传输
    ISO(国际化标准组织)
 OSI七层模型  >>> 网络通信工作流程标准化
    应用层
        提供用户服务,具体功能有具体程序体现
    表示层
        数据的压缩优化加密
    会话层
        建立应用级的连接,选择适当的传输服务
    传输层
        提供传输服务,做一些流量的控制  流量 ==>访问量
    网络层
        路由选择,网络互连
    链路层
        进行数据交换,控制具体消息的发送
    物理层
        提供了数据传输的硬件保证,网卡,接口设置,传输介质
    优点:
        建立了统一的工作流程
        分步清晰每一步各司其职
        降低了通信模块的耦合度
cookie 拓展
    高内聚
        模块的功能尽可能单一,不要互相掺杂
    低耦合
        模块之间的关联影响尽可能少
简化模型 
    四层模型 TCP/IP模型
        应用层  传输层  网络层  物理链路层
    五层模型
        应用层  传输层  网络层  链路层  物理层  
    *将应用层,表示层,会话层统一由应用层完成,便于应用的开发
数据的传输流程
    发送端由应用层到物理层逐层添加首部信息,最终在物理层发送消息包
    发送的消息中间经过多个节点传送,路由基站交换机等,最终到达目标主机
    目标主机逐层解析消息包,最终由应用层呈现数据信息
网络协议
    网络通信中双方都遵循的规定,包括建立什么样的数据结构,消息结构等
网络编程概念
    网络主机    在网络中标识一台计算机  host
    本地       "localhost"     
              '127.0.0.1'  本机环回地址
              只能用于本地的程序进行测试
    网络使用
                "0,0,0,0"  使用本机能够使用的网卡地址
            ip 地址
                '192.168.56.128'  外部连接能够使用该IP
    linux查看IP地址
        终端输入    ifconfig

ip地址
        在网络上确定一台主机的网络路由位置
    分类
        ipv4    点分十进制 192.168.1.2   0-255 
        ipv6    128位,欧美在推行,中国民用主用ipv4
    注意
        公网ip唯一,
    连接测试命令
        ping ip     测试是否可以联通其他主机,连接测试命令
        192.168.56.0  表达一个网段
        192.168.56.1  通常标识网关地址
        192.168.56.255 广播地址  自己用的一般为2~254
域名
    网络服务器地址的别名
端口号 port
    端口是网络地址的一部分,用于区分网络主机的不同网络应用程序
    *在一个系统应用监听的端口号不可重复
    取值范围    1-65535
    常用的一些范围
        1 -- 255     一些众所周知的公共程序端口
        256 -- 1=23  系统应用端口
        1024 -65535   自用端口
传输服务
    面向连接的传输服务(基于tcp的数据传输)
        传输特征
            提供可靠的数据传输,可靠性指数据传输过程中无丢失,无失序,无差错,无重复
        实现手段
            在通信前需要建立数据连接,通信结束要正常断开连接
        连接(三次握手) 
            客户端向服务器发送连接标志变量表示请求连接
            服务器收到请求后,恢复变量标志确定可连接
            客户端收到回复,发送最终连接标志建立连接
        断开连接(四次挥手)
            主动发发送标志表示请求断开连接
            被动方收到请求后立即回复
            被动方消息处理完毕再次发送标志表示已经准备可以断开
            主动方收到被动方标志,发送最终断开标志,连接断开
        适用情况
            对数据准确性有明确要求,传输数据文件较大,需要确保可靠性传输的情况
            如:
                网页获取,文件下载,邮件收发
    面向无连接的传输服务 (基于udp协议的传输)
        传输特点
            不保证传输的可靠性,传输过程没有连接和断开过程,数据只有收发
        优点:
            效率高
        使用情况
            网络较差,对传输可靠性要求不高,比较要求效率
            如
                网络视频,群聊,广播
客户端/服务器架构
        服务器就是一系列硬件或软件,为一个或多个客户端(服务的用户)提供所需的“服务”.
    功能
        它存在唯一目的就是等待客户端的请求,并响应它们(提供服务),然后等待更多请求。
        客户端/服务器架构既可以应用于计算机硬件,也可以应用于软件。
    举例
        一个运行在无限循环中的服务器,而每个客户就是一个客户端,每个
        客户端都有一个需要解决的需求。这些客户到达银行,并由出纳以“先来先服务”的方式处
        理。一旦一个事务完成,客户就会离开,而出纳员要么为下一位客户服务,要么坐下来等待,
        直到下一位客户到来。
客户端/服务器网络编程
    过程
        在服务器响应客户端请求之前,必须进行一些初步的设置流程来为之后的工作做准备。
        1.首先会创建一个通信端点,它能够使服务器监听请求。
        2.一旦一个通信端点已经建立,监听服务器就可以进入无限循环中,
        等待客户端的连接并响应它们的请求。
    注意
        必须让潜在的客户知道存在这样的服务器来处理他们的需求;否则,服务器将
        永远不会得到任何请求。
硬件客户端/服务器架构
    举例:
        打印服务器
            它们处理传入的打印作业并将其发送给系统中的打印机(或其他的打印设备).
            这样的计算机通常可以通过网络进行访问,并且用户端计算机将向它发送打印请求。
        
        文件服务器
            支持文件服务器的一个最流行的网络操作系统就是 Sun 公司的网络文件系统(NFS)
            它的目标就是让用户得到与访问本地磁盘完全相同的体验,抽象起来就是正常的磁盘访问,
            而这些都是通过编程实现来确保以这种方式进行。
软件客户端/服务器架构
        软件服务器也运行在一块硬件之上,但是没有像硬件服务器那样的专用外围设备(如打印机、磁盘驱动器等)。
        软件服务器提供的主要服务包括程序执行、数据传输检索、聚合、更新,或其他类型的编程或数据操作。
    web服务器
            现在一个更常见的软件服务器就是 Web 服务器。如果个人或公司想要运行自己的 Web 服务
            器,那么必须拥有一台或多台计算机,在上面安装希望提供给用户的 Web 页面和 Web 应用程序,
            然后启动 Web 服务器
        功能
            一个这样的服务器的工作就是接受客户端请求,并向(Web)客户端(即
            用户计算机上的浏览器)回送 Web 页面,然后等待下一个客户端的请求。
    软件服务器
            它们接受客户端的存储或检索请求,响应请求,然后等待更多的事务。
            与 Web 服务器类似,它们也是永远运行的。
    窗体(window)服务器
            几乎可以认为这些服务器是硬件服务器.
            它们运行在一台附带(外接)显示设备(如显示器)的计算机上。窗体客
            户端其实就是一些程序,这些程序需要一个窗口化的环境来运行。这些通常被当作图形用户
            界面(GUI)应用程序。如果在没有窗体服务器的情况下执行它们,也即意味着在一个基于
            文本的环境中,如 DOS 窗口或一个 UNIX shell 中,那么将无法启动它们。一旦能够访问窗
            体服务器,那么一切都会正常。



    
    